'use strict';

var chai = require('chai');
var util = require('util');
var serialPort = require('../serialport');

describe ('requiresComPort', function() {

  describe('echo hello', function() {
    it('envía hola al último puerto y valida que se reciba de nuevo', function(done) {
      serialPort.list(function(err, ports) {
        chai.assert.isUndefined(err, util.inspect(err));
        chai.assert.isDefined(ports, 'puertos no está definido');
        chai.assert.isTrue(ports.length > 0, 'no hay puertos funcionando');
        var data = new Buffer('hello llll [200,0,0]');
        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);
        port.on('error', function(err) {
          chai.assert.fail(util.inspect(err));
        });
        port.on('data', function(d) {
          chai.assert.equal(data.toString(), d.toString(), 'datos incorrectos recibidos');
          port.close(function(err) {
            chai.assert.isUndefined(err, util.inspect(err));
            port.open(function(err) {
              chai.assert.isUndefined(err, util.inspect(err));
              port.write(data);
            });
            done();
          });
        });
        port.open(function(err) {
          chai.assert.isUndefined(err, util.inspect(err));
          port.write(data);
        });
      });
    });
  });

  describe('velocidad de transmisión relajado', function() {
    it('abre un puerto con una velocidad de transmisión no estándar', function(done) {
      serialPort.list(function(err, ports) {
        chai.assert.isUndefined(err, util.inspect(err));
        chai.assert.isDefined(ports, 'puertos no está definido');
        chai.assert.isTrue(ports.length > 0, 'no hay puertos funcionando');
        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, {baudrate: 5}, false);
        port.on('error', function(err) {
          chai.assert.fail(util.inspect(err));
        });
        port.open(function(err) {
          chai.assert.isUndefined(err, util.inspect(err));
          port.close(function(err) {
            chai.assert.isUndefined(err, util.inspect(err));
            done();
          });
        });
      });
    });
  });

  describe('escritura sencilla', function() {
    it('abre un puerto y envía los datos sin error encuentro', function(done) {
      serialPort.list(function(err, ports) {
        chai.assert.isUndefined(err, util.inspect(err));
        chai.assert.isDefined(ports, 'puertos no está definido');
        chai.assert.isTrue(ports.length > 0, 'no hay puertos funcionando');
        var data = new Buffer('hello');
        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);
        port.on('error', function(err) {
          chai.assert.fail(util.inspect(err));
        });
        port.open(function(err) {
          chai.assert.isUndefined(err, util.inspect(err));
          port.write(data);
          port.close(function(err) {
            chai.assert.isUndefined(err, util.inspect(err));
            done();
          });
        });
      });
    });
  });

    describe('validar evento close', function() {
    it('abre un puerto y luego la cierra mediante eventos', function(done) {
      serialPort.list(function(err, ports) {
        chai.assert.isUndefined(err, util.inspect(err));
        chai.assert.isDefined(ports, 'puertos no está definido');
        chai.assert.isTrue(ports.length > 0, 'no hay puertos funcionando');
        var port = new serialPort.SerialPort(ports.slice(-1)[0].comName, null, false);
        port.on('error', function(err) {
          chai.assert.fail(util.inspect(err));
        });
        port.on('open', function() {
          port.close();
        });
        port.on('close', function() {
          done();
        });
        port.open();
      });
    });
  });

});
